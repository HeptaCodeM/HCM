<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hcm.grw.model.mapper.EmployeeDaoImpl">

	<!-- 일반로그인 -->
	<select id="getLogin" parameterType="String" resultType="EmployeeDto">
		SELECT EMPL_ID, EMPL_PWD, EMPL_AUTH
		FROM EMPLOYEE
		WHERE EMPL_ID = #{empl_id}
		AND EMPL_DELFLAG = 'N'
	</select>

	<!-- 소셜로그인 -->
	<select id="getSnsLoginInfo" parameterType="String" resultType="SnsInfoDto">
		SELECT
		ES.EMSN_ID,
		ES.EMPL_ID,
		ES.EMSN_EMAIL,
		ES.EMSN_CREATE_DT
		FROM EMPLOYEE E
		INNER JOIN EMP_SNS ES ON E.EMPL_ID = ES.EMPL_ID
		WHERE E.EMPL_ID = #{empl_id}
		AND E.EMPL_DELFLAG = 'N'
	</select>

	<!-- 인증번호 메일발송 -->
	<select id="getInitPwdcheck" parameterType="Map" resultType="Integer">
		SELECT COUNT(*)
		FROM EMPLOYEE
		WHERE EMPL_ID = #{empl_id}
		AND EMPL_NAME = #{empl_name}
		AND EMPL_EMAIL = #{empl_email}
		AND EMPL_DELFLAG = 'N'
	</select>

	<!-- 비밀번호 초기화 처리 -->
	<update id="getInitPwdcheck" parameterType="Map">
		UPDATE EMPLOYEE SET
		EMPL_PWD = #{empl_pwd},
		EMPL_MODIFY_ID = #{empl_id},
		EMPL_MODIFY_DT = CURRENT_DATE
		WHERE EMPL_ID = #{empl_id}
		AND EMPL_DELFLAG = 'N'
	</update>

	<!-- 사원등록 -->
	<insert id="registEmployee" parameterType="EmployeeDto">
		<selectKey keyProperty="empl_id" resultType="String" order="BEFORE">
			SELECT TO_CHAR(NVL(MAX(EMPL_ID), TO_CHAR(CURRENT_DATE, 'YYYY')||'0000')+1)
			FROM EMPLOYEE
			WHERE SUBSTR(EMPL_ID, 1, 4) = TO_CHAR(CURRENT_DATE, 'YYYY')
		</selectKey>
		INSERT INTO EMPLOYEE
		(EMPL_ID, EMPL_PWD, EMPL_NAME, EMPL_BIRTH, EMPL_GENDER, EMPL_EMAIL,
		EMPL_PHONE, EMPL_JOINDATE, EMPL_DEPT_CD, EMPL_RANK_CD,
		EMPL_AUTH, EMPL_CREATE_ID)
		VALUES(#{empl_id}, #{empl_pwd}, #{empl_name}, #{empl_birth}, #{empl_gender}, #{empl_email},
		#{empl_phone}, #{empl_joindate}, #{empl_dept_cd}, #{empl_rank_cd},
		#{empl_auth}, #{empl_create_id})
	</insert>

	<!-- 사원관리(임직원) - 수정 -->
	<update id="updateEmployee" parameterType="EmployeeDto">
		UPDATE EMPLOYEE SET
		EMPL_PHONE = #{empl_phone},
		EMPL_TEL = #{empl_tel},
		EMPL_FAX = #{empl_fax},
		EMPL_PICTURE = #{empl_picture},
		EMPL_MODIFY_ID = #{empl_modify_id},
		EMPL_MODIFY_DT = CURRENT_DATE
		WHERE EMPL_ID = #{empl_id}
		AND EMPL_DELFLAG = 'N'
	</update>

	<!-- 권한관리 리스트 -->
	<select id="getAuthList" resultType="EmployeeDto">
		SELECT
		EMPL_ID, EMPL_NAME, EMPL_DEPT_CD, EMPL_RANK_CD, EMPL_AUTH
		FROM EMPLOYEE
		WHERE EMPL_DELFLAG = 'N'
		AND EMPL_AUTH != 'ROLE_USER'
		ORDER BY EMPL_ID ASC, EMPL_AUTH DESC
	</select>

	<!-- 권한관리 상세페이지 -->
	<select id="getAuthDetail" parameterType="String" resultType="EmployeeDto">
		SELECT
		EMPL_ID, EMPL_NAME, EMPL_DEPT_CD, EMPL_RANK_CD, EMPL_AUTH
		FROM EMPLOYEE
		WHERE EMPL_DELFLAG = 'N'
		AND EMPL_AUTH != 'ROLE_USER'
		AND EMPL_ID = #{empl_id}
	</select>

	<!-- 권한관리 등록처리 및 해당 페이지 권한적용 -->
	<update id="updateAuthEmployee" parameterType="Map">
		UPDATE EMPLOYEE SET
		EMPL_AUTH = #{empl_auth},
		EMPL_MODIFY_ID = #{empl_modify_id},
		EMPL_MODIFY_DT = CURRENT_DATE
		WHERE EMPL_ID = #{empl_id}
	</update>

	<!-- 간편로그인 조회 -->
	<select id="getSnsInfo" parameterType="String" resultType="SnsInfoDto">
		SELECT
		ES.EMSN_ID,
		ES.EMPL_ID,
		ES.EMSN_EMAIL,
		ES.EMSN_CREATE_DT
		FROM EMPLOYEE E
		INNER JOIN EMP_SNS ES ON E.EMPL_ID = ES.EMPL_ID
		WHERE E.EMPL_ID = #{empl_id}
	</select>

	<!-- 간편로그인 삭제 -->
	<delete id="delSnsInfo" parameterType="String">
		DELETE FROM EMP_SNS
		WHERE EMSN_ID = #{emsn_id}
	</delete>

	<!-- 등록처리-OAuth2 -->
	<insert id="registSnsLoginInfo" parameterType="SnsInfoDto">
		INSERT INTO EMP_SNS(EMSN_ID, EMPL_ID, EMSN_EMAIL)
		VALUES(#{emsn_id}, #{empl_id}, #{emsn_email})
	</insert>

	<!-- 비밀번호 변경 -->
	<update id="updatePwd" parameterType="Map">
		UPDATE EMPLOYEE SET
		EMPL_PWD = #{empl_new_pwd},
		EMPL_MODIFY_ID = #{empl_modify_id},
		EMPL_MODIFY_DT = CURRENT_DATE
		WHERE EMPL_ID = #{empl_id}
		AND EMPL_PWD = #{empl_pwd}
		AND EMPL_DELFLAG = 'N'
	</update>

	<!-- 리스트 조회(임직원) -->
	<select id="getOrderList" parameterType="String" resultType="OrderInfoListDto">
		SELECT
		A.EMOR_ID,
		C.EMPL_ID,
		C.EMPL_NAME,
		B.EMOD_PREV_DEPT,
		D.COCO_NAME AS EMOD_PREV_DEPT_NM,
		B.EMOD_ORDER_DEPT,
		E.COCO_NAME AS EMOD_ORDER_DEPT_NM,
		B.EMOD_PREV_RANK,
		F.COCO_NAME AS EMOD_PREV_RANK_NM,
		B.EMOD_ORDER_RANK,
		G.COCO_NAME AS EMOD_ORDER_RANK_NM,
		B.EMOD_PREV_POSITION,
		H.COCO_NAME AS EMOD_PREV_POSITION_NM,
		B.EMOD_ORDER_POSITION,
		I.COCO_NAME AS EMOD_ORDER_POSITION_NM
		FROM EMP_ORDER A
		INNER JOIN EMP_ORDER_DETAIL B ON A.EMOR_ID = B.EMOR_ID
		INNER JOIN EMPLOYEE C ON B.EMPL_ID = C.EMPL_ID
		LEFT OUTER JOIN COMMON_CODE D ON B.EMOD_PREV_DEPT = D.COCO_CD
		LEFT OUTER JOIN COMMON_CODE E ON B.EMOD_ORDER_DEPT = E.COCO_CD
		LEFT OUTER JOIN COMMON_CODE F ON B.EMOD_PREV_RANK = F.COCO_CD
		LEFT OUTER JOIN COMMON_CODE G ON B.EMOD_ORDER_RANK = G.COCO_CD
		LEFT OUTER JOIN COMMON_CODE H ON B.EMOD_PREV_POSITION = H.COCO_CD
		LEFT OUTER JOIN COMMON_CODE I ON B.EMOD_ORDER_POSITION = I.COCO_CD
		WHERE EMOR_STATUS = 'Y'
		AND C.EMPL_ID = #{empl_id}
		ORDER BY A.EMOR_ID DESC, B.EMOD_SEQ ASC
	</select>

	<!-- 리스트 조회(임직원) -->
	<select id="getOrderAdminList" resultType="OrderInfoListDto">
		SELECT
		A.EMOR_ID,
		C.EMPL_ID,
		C.EMPL_NAME,
		B.EMOD_PREV_DEPT,
		D.COCO_NAME AS EMOD_PREV_DEPT_NM,
		B.EMOD_ORDER_DEPT,
		E.COCO_NAME AS EMOD_ORDER_DEPT_NM,
		B.EMOD_PREV_RANK,
		F.COCO_NAME AS EMOD_PREV_RANK_NM,
		B.EMOD_ORDER_RANK,
		G.COCO_NAME AS EMOD_ORDER_RANK_NM,
		B.EMOD_PREV_POSITION,
		H.COCO_NAME AS EMOD_PREV_POSITION_NM,
		B.EMOD_ORDER_POSITION,
		I.COCO_NAME AS EMOD_ORDER_POSITION_NM
		FROM EMP_ORDER A
		INNER JOIN EMP_ORDER_DETAIL B ON A.EMOR_ID = B.EMOR_ID
		INNER JOIN EMPLOYEE C ON B.EMPL_ID = C.EMPL_ID
		LEFT OUTER JOIN COMMON_CODE D ON B.EMOD_PREV_DEPT = D.COCO_CD
		LEFT OUTER JOIN COMMON_CODE E ON B.EMOD_ORDER_DEPT = E.COCO_CD
		LEFT OUTER JOIN COMMON_CODE F ON B.EMOD_PREV_RANK = F.COCO_CD
		LEFT OUTER JOIN COMMON_CODE G ON B.EMOD_ORDER_RANK = G.COCO_CD
		LEFT OUTER JOIN COMMON_CODE H ON B.EMOD_PREV_POSITION = H.COCO_CD
		LEFT OUTER JOIN COMMON_CODE I ON B.EMOD_ORDER_POSITION = I.COCO_CD
		WHERE EMOR_STATUS = 'Y'
		ORDER BY A.EMOR_ID DESC, B.EMOD_SEQ ASC
	</select>

	<!-- 발령정보 등록_마스터 -->
	<insert id="registOrderAdminMaster" parameterType="String">
		<selectKey keyProperty="emor_id" resultType="String" order="BEFORE">
			SELECT 'O'||TO_CHAR(NVL(MAX(REPLACE(EMOR_ID,'O','')), TO_CHAR(CURRENT_DATE, 'YYYY')||'000')+1)
			FROM EMP_ORDER
			WHERE SUBSTR(EMOR_ID, 2, 4) = TO_CHAR(CURRENT_DATE, 'YYYY')
		</selectKey>

		INSERT INTO EMP_ORDER (EMOR_ID, EMOR_STATUS, EMOR_CREATE_ID)
		VALUES (#{emor_id}, 'N', #{emor_create_id})
	</insert>


	<!-- 발령정보 등록_상세 -->
	<insert id="registOrderAdminDetail" parameterType="OrderInfoDetailDto">
		<selectKey keyProperty="emod_seq" resultType="Integer" order="BEFORE">
			SELECT NVL(MAX(EMOD_SEQ),0)+1 FROM EMP_ORDER_DETAIL WHERE EMOR_ID=#{emor_id}
		</selectKey>
		INSERT INTO EMP_ORDER_DETAIL (
		EMOR_ID, EMOD_SEQ, EMPL_ID, EMOD_ORDER_DT, EMOD_TYPE,
		EMOD_PREV_DEPT, EMOD_ORDER_DEPT,
		EMOD_PREV_RANK, EMOD_ORDER_RANK,
		EMOD_PREV_POSITION, EMOD_ORDER_POSITION, EMOD_CREATE_ID
		)
		VALUES (
		#{emor_id}, #{emod_seq}, #{empl_id}, #{emod_order_dt}, #{emod_type},
		#{emod_prev_dept}, #{emod_order_dept},
		#{emod_prev_rank}, #{emod_order_rank},
		#{emod_prev_position}, #{emod_order_position}, #{emod_create_id}
		)
	</insert>


	<!-- 발령정보 수정처리 -->
	<update id="updateOrderAdminDetail" parameterType="OrderInfoDetailDto">
		UPDATE EMP_ORDER_DETAIL SET
		EMOD_ORDER_DT = #{emod_order_dt},
		EMOD_ORDER_DEPT = #{emod_order_dept},
		EMOD_ORDER_RANK = #{emod_order_rank},
		EMOD_ORDER_POSITION = #{emod_order_position},
		EMOD_MODIFY_ID = #{emod_modify_id},
		EMOD_MODIFY_DT = CURRENT_DATE
		WHERE EMOR_ID = #{emor_id}
		AND EMOD_SEQ = #{emod_seq}
	</update>


	<!-- 출근 등록 -->
	<insert id="registCommute" parameterType="CommuteDto">
		<selectKey keyProperty="emco_seq" resultType="Integer" order="BEFORE">
			SELECT NVL(MAX(EMCO_SEQ),0)+1 FROM EMP_COMMUTE
		</selectKey>
		INSERT INTO EMP_COMMUTE(EMCO_SEQ, EMPL_ID, EMCO_IN_DT)
		VALUES(#{emco_seq}, #{empl_id}, CURRENT_DATE)
	</insert>

	<!-- 퇴근 등록 -->
	<update id="updateCommute" parameterType="String">
		UPDATE EMP_COMMUTE SET
		EMCO_OUT_DT = CURRENT_DATE
		WHERE EMCO_SEQ = #{emco_seq}
	</update>

	<!-- 출퇴근 현황 -->
	<select id="commuteList" parameterType="Map">
		SELECT
		A.EMPL_ID,
		A.EMCO_IN_DT,
		A.EMCO_OUT_DT,
		TO_CHAR(A.EMCO_IN_DT, 'YYYYMMDD')
		FROM EMP_COMMUTE A
		INNER JOIN EMPLOYEE B ON A.EMPL_ID = B.EMPL_ID
		WHERE A.EMPL_ID = #{empl_id}
		AND TO_CHAR(A.EMCO_IN_DT, 'YYYYMMDD') BETWEEN TO_DATE(#{searchdt}, 'YYYYMM') AND TRUNC(ADD_MONTHS(TO_DATE(#{searchdt},
		'YYYYMM'), 1), 'MM')
		ORDER BY A.EMCO_SEQ DESC
	</select>


	<insert id="registEmployeeHoliday">
		<![CDATA[
		INSERT INTO EMP_HOLIDAY(EMHO_YEAR, EMPL_ID, EMHO_HOLIDAY)
		SELECT
		TO_CHAR(CURRENT_DATE, 'YYYY'),
		A.EMPL_ID,
		A.HOLIDAY
		FROM (
		SELECT
		T.EMPL_ID,
		T.EMPL_NAME,
		T.EMPL_JOINDATE,
		T.YEAR_DIFFERENCE,
		CASE WHEN T.YEAR_DIFFERENCE < 1 THEN 0
		WHEN T.YEAR_DIFFERENCE >= 1 THEN
		CASE WHEN 15+((T.YEAR_DIFFERENCE-1)/2) > 20 THEN 20
		ELSE 15+TRUNC((T.YEAR_DIFFERENCE-1)/2)
		END
		END AS HOLIDAY
		FROM (
		SELECT
		A.EMPL_ID,
		A.EMPL_NAME,
		A.EMPL_JOINDATE,
		TRUNC(MONTHS_BETWEEN(TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD'), TO_DATE(A.EMPL_JOINDATE, 'YYYY-MM-DD')) / 12) AS YEAR_DIFFERENCE
		FROM EMPLOYEE A
		WHERE EMPL_DELFLAG ='N'
		) T
		WHERE T.YEAR_DIFFERENCE > 0
		) A
		LEFT OUTER JOIN EMP_HOLIDAY B ON A.EMPL_ID = B.EMPL_ID AND B.EMHO_YEAR = TO_CHAR(CURRENT_DATE , 'YYYY')
		WHERE B.EMPL_ID IS NULL
		AND A.HOLIDAY > 0
		]]>
	</insert>


	<!-- 휴가정보 조회 -->
	<select id="holidayList" parameterType="String">
		SELECT
		A.SIDB_DOC_NUM,
		B.SICA_NAME,
		C.SIDT_TEMP_NAME,
		A.SIDB_DOC_TITLE,
		A.SIDB_DOC_APPRDT, -- 최종승인일(증명서 기간 종료일로 지정)
		A.SIDB_DOC_BE,
		A.SIDB_DOC_END,
		(A.SIDB_DOC_END - A.SIDB_DOC_BE) + 1 AS HOLIDAY
		FROM SIGN_DOC_BOX A
		INNER JOIN SIGN_CATEGORY B ON A.SICA_CD = B.SICA_CD
		INNER JOIN SIGN_DOC_TEMP C ON A.SIDT_TEMP_CD = C.SIDT_TEMP_CD
		INNER JOIN EMPLOYEE D ON A.EMPL_ID = D.EMPL_ID
		WHERE D.EMPL_ID = #{empl_id}
		AND A.SIDB_DOC_STAT = '3'
		AND B.SICA_CD = 'CC000001' --근태
		AND C.SIDT_TEMP_CD IN ('TC000001', 'TC000002') --TC000001(연차신청서), TC000002(휴가신청서)
	</select>



</mapper>
